/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ncp.airlock.client;

import com.ncp.airlock.client.invoker.ApiException;
import com.ncp.airlock.client.model.Experiment;
import com.ncp.airlock.client.model.ExperimentList;
import com.ncp.airlock.client.model.Feature;
import com.ncp.airlock.client.model.Stream;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DebugApi
 */
@Ignore
public class DebugApiTest {

    private final DebugApi api = new DebugApi();

    
    /**
     * Clears the cached data for specific product
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clearCacheTest() throws ApiException {
        String productInstanceId = null;
        String response = api.clearCache(productInstanceId);

        // TODO: test validations
    }
    
    /**
     * Retrieves current experiment info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExperimentTest() throws ApiException {
        String productInstanceId = null;
        Experiment response = api.getExperiment(productInstanceId);

        // TODO: test validations
    }
    
    /**
     * Retrieves the existing experiments info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExperimentsTest() throws ApiException {
        String productInstanceId = null;
        ExperimentList response = api.getExperiments(productInstanceId);

        // TODO: test validations
    }
    
    /**
     * Retrieves all features of the specified product.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeatureStatusesTest() throws ApiException {
        String productInstanceId = null;
        List<Feature> response = api.getFeatureStatuses(productInstanceId);

        // TODO: test validations
    }
    
    /**
     * Retrieves list of branch names existing on this product
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductBranchesTest() throws ApiException {
        String productInstanceId = null;
        List<List<Object>> response = api.getProductBranches(productInstanceId);

        // TODO: test validations
    }
    
    /**
     * Gets product responsive mode streams for this product. DIRECT_MODE or CACHED_MODE
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResponsiveModeTest() throws ApiException {
        String productInstanceId = null;
        String response = api.getResponsiveMode(productInstanceId);

        // TODO: test validations
    }
    
    /**
     * Retrieves the current branch name is being used for this product.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSelectedBranchTest() throws ApiException {
        String productInstanceId = null;
        String response = api.getSelectedBranch(productInstanceId);

        // TODO: test validations
    }
    
    /**
     * Gets all streams for this product.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStreamsTest() throws ApiException {
        String productInstanceId = null;
        Stream response = api.getStreams(productInstanceId);

        // TODO: test validations
    }
    
    /**
     * Returns whether the device inside the feature percentage range or outside. The method is applicable for features, experiments,variant and streams
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void isDeviceInFeaturePercentageRangeTest() throws ApiException {
        String productInstanceId = null;
        String section = null;
        String itemName = null;
        String response = api.isDeviceInFeaturePercentageRange(productInstanceId, section, itemName);

        // TODO: test validations
    }
    
    /**
     * Sets the current branch to be used on this product.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putProductBranchTest() throws ApiException {
        String productInstanceId = null;
        String branchName = null;
        String response = api.putProductBranch(productInstanceId, branchName);

        // TODO: test validations
    }
    
    /**
     * Apply stream action on specific stream, the available actions are: [reset], [clearTrace], [suspend]
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runActionOnStreamTest() throws ApiException {
        String productInstanceId = null;
        String streamId = null;
        String actionId = null;
        Boolean doSuspend = null;
        String response = api.runActionOnStream(productInstanceId, streamId, actionId, doSuspend);

        // TODO: test validations
    }
    
    /**
     * Sets the device to be inside the feature percentage range or outside. The method is applicable for features, experiments,variant and streams
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDevicePercentageRange4FeatureTest() throws ApiException {
        String productInstanceId = null;
        String section = null;
        String itemName = null;
        String body = null;
        String response = api.setDevicePercentageRange4Feature(productInstanceId, section, itemName, body);

        // TODO: test validations
    }
    
    /**
     * Update product responsive mode streams for this product. DIRECT_MODE or CACHED_MODE
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setResponsiveModeTest() throws ApiException {
        String productInstanceId = null;
        String body = null;
        String response = api.setResponsiveMode(productInstanceId, body);

        // TODO: test validations
    }
    
    /**
     * Retrieves the server statistic data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void statisticTest() throws ApiException {
        String response = api.statistic();

        // TODO: test validations
    }
    
}
