/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ncp.airlock.client;

import com.ncp.airlock.client.invoker.ApiCallback;
import com.ncp.airlock.client.invoker.ApiClient;
import com.ncp.airlock.client.invoker.ApiException;
import com.ncp.airlock.client.invoker.ApiResponse;
import com.ncp.airlock.client.invoker.Configuration;
import com.ncp.airlock.client.invoker.Pair;
import com.ncp.airlock.client.invoker.ProgressRequestBody;
import com.ncp.airlock.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ncp.airlock.client.model.Product;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductsApi {
    private ApiClient apiClient;

    public ProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for delete
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCall(String productInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/products/{productInstanceId}"
            .replaceAll("\\{" + "productInstanceId" + "\\}", apiClient.escapeString(productInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteValidateBeforeCall(String productInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productInstanceId' is set
        if (productInstanceId == null) {
            throw new ApiException("Missing the required parameter 'productInstanceId' when calling delete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCall(productInstanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Removes the specified product completely from the system including all cached data related to it. Parallel to uninstalling the application.
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String delete(String productInstanceId) throws ApiException {
        ApiResponse<String> resp = deleteWithHttpInfo(productInstanceId);
        return resp.getData();
    }

    /**
     * Removes the specified product completely from the system including all cached data related to it. Parallel to uninstalling the application.
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteWithHttpInfo(String productInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = deleteValidateBeforeCall(productInstanceId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Removes the specified product completely from the system including all cached data related to it. Parallel to uninstalling the application. (asynchronously)
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAsync(String productInstanceId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteValidateBeforeCall(productInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllProducts
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllProductsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllProductsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllProductsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves all products.
     * 
     * @return List&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Product> getAllProducts() throws ApiException {
        ApiResponse<List<Product>> resp = getAllProductsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves all products.
     * 
     * @return ApiResponse&lt;List&lt;Product&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Product>> getAllProductsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllProductsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves all products. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllProductsAsync(final ApiCallback<List<Product>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllProductsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProductByID
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProductByIDCall(String productInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/products/{productInstanceId}"
            .replaceAll("\\{" + "productInstanceId" + "\\}", apiClient.escapeString(productInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProductByIDValidateBeforeCall(String productInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productInstanceId' is set
        if (productInstanceId == null) {
            throw new ApiException("Missing the required parameter 'productInstanceId' when calling getProductByID(Async)");
        }
        

        com.squareup.okhttp.Call call = getProductByIDCall(productInstanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves a product by its id.
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Product getProductByID(String productInstanceId) throws ApiException {
        ApiResponse<Product> resp = getProductByIDWithHttpInfo(productInstanceId);
        return resp.getData();
    }

    /**
     * Retrieves a product by its id.
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Product> getProductByIDWithHttpInfo(String productInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = getProductByIDValidateBeforeCall(productInstanceId, null, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves a product by its id. (asynchronously)
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProductByIDAsync(String productInstanceId, final ApiCallback<Product> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProductByIDValidateBeforeCall(productInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for init
     * @param appVersion The current version of the application requesting the initialization. The version range of the provided defaults file must include this version. (required)
     * @param UNKNOWN_BASE_TYPE The contents of the defaults file downloaded from the Airlock Control Center. (required)
     * @param encryptionKey The product encryption key. The key is intended to protect a product cached data, is specific for each product and could be downloaded from the Airlock Control Center. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call initCall(String appVersion, Object UNKNOWN_BASE_TYPE, String encryptionKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/products/init";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("appVersion", appVersion));
        if (encryptionKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("encryptionKey", encryptionKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call initValidateBeforeCall(String appVersion, Object UNKNOWN_BASE_TYPE, String encryptionKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'appVersion' is set
        if (appVersion == null) {
            throw new ApiException("Missing the required parameter 'appVersion' when calling init(Async)");
        }
        
        // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
        if (UNKNOWN_BASE_TYPE == null) {
            throw new ApiException("Missing the required parameter 'UNKNOWN_BASE_TYPE' when calling init(Async)");
        }
        

        com.squareup.okhttp.Call call = initCall(appVersion, UNKNOWN_BASE_TYPE, encryptionKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Initializes a product in Airlock. Must be called once before any other Airlock function can be used in this product. In case the product is already initialized and the product&#39;s version or defaults file does not match the previously initialized product then all of the product&#39;s cached data will be cleared except for user groups. Otherwise, this operation will have no affect.
     * 
     * @param appVersion The current version of the application requesting the initialization. The version range of the provided defaults file must include this version. (required)
     * @param UNKNOWN_BASE_TYPE The contents of the defaults file downloaded from the Airlock Control Center. (required)
     * @param encryptionKey The product encryption key. The key is intended to protect a product cached data, is specific for each product and could be downloaded from the Airlock Control Center. (optional)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Product init(String appVersion, Object UNKNOWN_BASE_TYPE, String encryptionKey) throws ApiException {
        ApiResponse<Product> resp = initWithHttpInfo(appVersion, UNKNOWN_BASE_TYPE, encryptionKey);
        return resp.getData();
    }

    /**
     * Initializes a product in Airlock. Must be called once before any other Airlock function can be used in this product. In case the product is already initialized and the product&#39;s version or defaults file does not match the previously initialized product then all of the product&#39;s cached data will be cleared except for user groups. Otherwise, this operation will have no affect.
     * 
     * @param appVersion The current version of the application requesting the initialization. The version range of the provided defaults file must include this version. (required)
     * @param UNKNOWN_BASE_TYPE The contents of the defaults file downloaded from the Airlock Control Center. (required)
     * @param encryptionKey The product encryption key. The key is intended to protect a product cached data, is specific for each product and could be downloaded from the Airlock Control Center. (optional)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Product> initWithHttpInfo(String appVersion, Object UNKNOWN_BASE_TYPE, String encryptionKey) throws ApiException {
        com.squareup.okhttp.Call call = initValidateBeforeCall(appVersion, UNKNOWN_BASE_TYPE, encryptionKey, null, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Initializes a product in Airlock. Must be called once before any other Airlock function can be used in this product. In case the product is already initialized and the product&#39;s version or defaults file does not match the previously initialized product then all of the product&#39;s cached data will be cleared except for user groups. Otherwise, this operation will have no affect. (asynchronously)
     * 
     * @param appVersion The current version of the application requesting the initialization. The version range of the provided defaults file must include this version. (required)
     * @param UNKNOWN_BASE_TYPE The contents of the defaults file downloaded from the Airlock Control Center. (required)
     * @param encryptionKey The product encryption key. The key is intended to protect a product cached data, is specific for each product and could be downloaded from the Airlock Control Center. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call initAsync(String appVersion, Object UNKNOWN_BASE_TYPE, String encryptionKey, final ApiCallback<Product> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = initValidateBeforeCall(appVersion, UNKNOWN_BASE_TYPE, encryptionKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
