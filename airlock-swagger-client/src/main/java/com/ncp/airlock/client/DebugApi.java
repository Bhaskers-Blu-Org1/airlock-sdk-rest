/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ncp.airlock.client;

import com.ncp.airlock.client.invoker.ApiCallback;
import com.ncp.airlock.client.invoker.ApiClient;
import com.ncp.airlock.client.invoker.ApiException;
import com.ncp.airlock.client.invoker.ApiResponse;
import com.ncp.airlock.client.invoker.Configuration;
import com.ncp.airlock.client.invoker.Pair;
import com.ncp.airlock.client.invoker.ProgressRequestBody;
import com.ncp.airlock.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ncp.airlock.client.model.Experiment;
import com.ncp.airlock.client.model.ExperimentList;
import com.ncp.airlock.client.model.Feature;
import com.ncp.airlock.client.model.Stream;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DebugApi {
    private ApiClient apiClient;

    public DebugApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DebugApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for clearCache
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clearCacheCall(String productInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/products/{productInstanceId}/cache"
            .replaceAll("\\{" + "productInstanceId" + "\\}", apiClient.escapeString(productInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clearCacheValidateBeforeCall(String productInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productInstanceId' is set
        if (productInstanceId == null) {
            throw new ApiException("Missing the required parameter 'productInstanceId' when calling clearCache(Async)");
        }
        

        com.squareup.okhttp.Call call = clearCacheCall(productInstanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Clears the cached data for specific product
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String clearCache(String productInstanceId) throws ApiException {
        ApiResponse<String> resp = clearCacheWithHttpInfo(productInstanceId);
        return resp.getData();
    }

    /**
     * Clears the cached data for specific product
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> clearCacheWithHttpInfo(String productInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = clearCacheValidateBeforeCall(productInstanceId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clears the cached data for specific product (asynchronously)
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clearCacheAsync(String productInstanceId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clearCacheValidateBeforeCall(productInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExperiment
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExperimentCall(String productInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/products/{productInstanceId}/experiment"
            .replaceAll("\\{" + "productInstanceId" + "\\}", apiClient.escapeString(productInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExperimentValidateBeforeCall(String productInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productInstanceId' is set
        if (productInstanceId == null) {
            throw new ApiException("Missing the required parameter 'productInstanceId' when calling getExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = getExperimentCall(productInstanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves current experiment info.
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @return Experiment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Experiment getExperiment(String productInstanceId) throws ApiException {
        ApiResponse<Experiment> resp = getExperimentWithHttpInfo(productInstanceId);
        return resp.getData();
    }

    /**
     * Retrieves current experiment info.
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @return ApiResponse&lt;Experiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Experiment> getExperimentWithHttpInfo(String productInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = getExperimentValidateBeforeCall(productInstanceId, null, null);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves current experiment info. (asynchronously)
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExperimentAsync(String productInstanceId, final ApiCallback<Experiment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExperimentValidateBeforeCall(productInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExperiments
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExperimentsCall(String productInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/products/{productInstanceId}/experiments"
            .replaceAll("\\{" + "productInstanceId" + "\\}", apiClient.escapeString(productInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExperimentsValidateBeforeCall(String productInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productInstanceId' is set
        if (productInstanceId == null) {
            throw new ApiException("Missing the required parameter 'productInstanceId' when calling getExperiments(Async)");
        }
        

        com.squareup.okhttp.Call call = getExperimentsCall(productInstanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves the existing experiments info.
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @return ExperimentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExperimentList getExperiments(String productInstanceId) throws ApiException {
        ApiResponse<ExperimentList> resp = getExperimentsWithHttpInfo(productInstanceId);
        return resp.getData();
    }

    /**
     * Retrieves the existing experiments info.
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @return ApiResponse&lt;ExperimentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExperimentList> getExperimentsWithHttpInfo(String productInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = getExperimentsValidateBeforeCall(productInstanceId, null, null);
        Type localVarReturnType = new TypeToken<ExperimentList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the existing experiments info. (asynchronously)
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExperimentsAsync(String productInstanceId, final ApiCallback<ExperimentList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExperimentsValidateBeforeCall(productInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExperimentList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFeatureStatuses
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFeatureStatusesCall(String productInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/products/{productInstanceId}/features"
            .replaceAll("\\{" + "productInstanceId" + "\\}", apiClient.escapeString(productInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFeatureStatusesValidateBeforeCall(String productInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productInstanceId' is set
        if (productInstanceId == null) {
            throw new ApiException("Missing the required parameter 'productInstanceId' when calling getFeatureStatuses(Async)");
        }
        

        com.squareup.okhttp.Call call = getFeatureStatusesCall(productInstanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves all features of the specified product.
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @return List&lt;Feature&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Feature> getFeatureStatuses(String productInstanceId) throws ApiException {
        ApiResponse<List<Feature>> resp = getFeatureStatusesWithHttpInfo(productInstanceId);
        return resp.getData();
    }

    /**
     * Retrieves all features of the specified product.
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @return ApiResponse&lt;List&lt;Feature&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Feature>> getFeatureStatusesWithHttpInfo(String productInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = getFeatureStatusesValidateBeforeCall(productInstanceId, null, null);
        Type localVarReturnType = new TypeToken<List<Feature>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves all features of the specified product. (asynchronously)
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFeatureStatusesAsync(String productInstanceId, final ApiCallback<List<Feature>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFeatureStatusesValidateBeforeCall(productInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Feature>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProductBranches
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProductBranchesCall(String productInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/products/{productInstanceId}/branches"
            .replaceAll("\\{" + "productInstanceId" + "\\}", apiClient.escapeString(productInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProductBranchesValidateBeforeCall(String productInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productInstanceId' is set
        if (productInstanceId == null) {
            throw new ApiException("Missing the required parameter 'productInstanceId' when calling getProductBranches(Async)");
        }
        

        com.squareup.okhttp.Call call = getProductBranchesCall(productInstanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves list of branch names existing on this product
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @return List&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<List<Object>> getProductBranches(String productInstanceId) throws ApiException {
        ApiResponse<List<List<Object>>> resp = getProductBranchesWithHttpInfo(productInstanceId);
        return resp.getData();
    }

    /**
     * Retrieves list of branch names existing on this product
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @return ApiResponse&lt;List&lt;List&lt;Object&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<List<Object>>> getProductBranchesWithHttpInfo(String productInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = getProductBranchesValidateBeforeCall(productInstanceId, null, null);
        Type localVarReturnType = new TypeToken<List<List<Object>>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves list of branch names existing on this product (asynchronously)
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProductBranchesAsync(String productInstanceId, final ApiCallback<List<List<Object>>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProductBranchesValidateBeforeCall(productInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<List<Object>>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getResponsiveMode
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getResponsiveModeCall(String productInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/products/{productInstanceId}/responsive-mode"
            .replaceAll("\\{" + "productInstanceId" + "\\}", apiClient.escapeString(productInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getResponsiveModeValidateBeforeCall(String productInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productInstanceId' is set
        if (productInstanceId == null) {
            throw new ApiException("Missing the required parameter 'productInstanceId' when calling getResponsiveMode(Async)");
        }
        

        com.squareup.okhttp.Call call = getResponsiveModeCall(productInstanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets product responsive mode streams for this product. DIRECT_MODE or CACHED_MODE
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getResponsiveMode(String productInstanceId) throws ApiException {
        ApiResponse<String> resp = getResponsiveModeWithHttpInfo(productInstanceId);
        return resp.getData();
    }

    /**
     * Gets product responsive mode streams for this product. DIRECT_MODE or CACHED_MODE
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getResponsiveModeWithHttpInfo(String productInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = getResponsiveModeValidateBeforeCall(productInstanceId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets product responsive mode streams for this product. DIRECT_MODE or CACHED_MODE (asynchronously)
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getResponsiveModeAsync(String productInstanceId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getResponsiveModeValidateBeforeCall(productInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSelectedBranch
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSelectedBranchCall(String productInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/products/{productInstanceId}/branch"
            .replaceAll("\\{" + "productInstanceId" + "\\}", apiClient.escapeString(productInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSelectedBranchValidateBeforeCall(String productInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productInstanceId' is set
        if (productInstanceId == null) {
            throw new ApiException("Missing the required parameter 'productInstanceId' when calling getSelectedBranch(Async)");
        }
        

        com.squareup.okhttp.Call call = getSelectedBranchCall(productInstanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves the current branch name is being used for this product.
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getSelectedBranch(String productInstanceId) throws ApiException {
        ApiResponse<String> resp = getSelectedBranchWithHttpInfo(productInstanceId);
        return resp.getData();
    }

    /**
     * Retrieves the current branch name is being used for this product.
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getSelectedBranchWithHttpInfo(String productInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = getSelectedBranchValidateBeforeCall(productInstanceId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the current branch name is being used for this product. (asynchronously)
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSelectedBranchAsync(String productInstanceId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSelectedBranchValidateBeforeCall(productInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStreams
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStreamsCall(String productInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/products/{productInstanceId}/streams"
            .replaceAll("\\{" + "productInstanceId" + "\\}", apiClient.escapeString(productInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStreamsValidateBeforeCall(String productInstanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productInstanceId' is set
        if (productInstanceId == null) {
            throw new ApiException("Missing the required parameter 'productInstanceId' when calling getStreams(Async)");
        }
        

        com.squareup.okhttp.Call call = getStreamsCall(productInstanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets all streams for this product.
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @return Stream
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Stream getStreams(String productInstanceId) throws ApiException {
        ApiResponse<Stream> resp = getStreamsWithHttpInfo(productInstanceId);
        return resp.getData();
    }

    /**
     * Gets all streams for this product.
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @return ApiResponse&lt;Stream&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Stream> getStreamsWithHttpInfo(String productInstanceId) throws ApiException {
        com.squareup.okhttp.Call call = getStreamsValidateBeforeCall(productInstanceId, null, null);
        Type localVarReturnType = new TypeToken<Stream>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all streams for this product. (asynchronously)
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStreamsAsync(String productInstanceId, final ApiCallback<Stream> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStreamsValidateBeforeCall(productInstanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Stream>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for isDeviceInFeaturePercentageRange
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param section The section of the item updated: could be features/experiments/streams (required)
     * @param itemName The name of the item updated (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call isDeviceInFeaturePercentageRangeCall(String productInstanceId, String section, String itemName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/products/{productInstanceId}/percentage"
            .replaceAll("\\{" + "productInstanceId" + "\\}", apiClient.escapeString(productInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (section != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("section", section));
        if (itemName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("itemName", itemName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call isDeviceInFeaturePercentageRangeValidateBeforeCall(String productInstanceId, String section, String itemName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productInstanceId' is set
        if (productInstanceId == null) {
            throw new ApiException("Missing the required parameter 'productInstanceId' when calling isDeviceInFeaturePercentageRange(Async)");
        }
        
        // verify the required parameter 'section' is set
        if (section == null) {
            throw new ApiException("Missing the required parameter 'section' when calling isDeviceInFeaturePercentageRange(Async)");
        }
        
        // verify the required parameter 'itemName' is set
        if (itemName == null) {
            throw new ApiException("Missing the required parameter 'itemName' when calling isDeviceInFeaturePercentageRange(Async)");
        }
        

        com.squareup.okhttp.Call call = isDeviceInFeaturePercentageRangeCall(productInstanceId, section, itemName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns whether the device inside the feature percentage range or outside. The method is applicable for features, experiments,variant and streams
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param section The section of the item updated: could be features/experiments/streams (required)
     * @param itemName The name of the item updated (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String isDeviceInFeaturePercentageRange(String productInstanceId, String section, String itemName) throws ApiException {
        ApiResponse<String> resp = isDeviceInFeaturePercentageRangeWithHttpInfo(productInstanceId, section, itemName);
        return resp.getData();
    }

    /**
     * Returns whether the device inside the feature percentage range or outside. The method is applicable for features, experiments,variant and streams
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param section The section of the item updated: could be features/experiments/streams (required)
     * @param itemName The name of the item updated (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> isDeviceInFeaturePercentageRangeWithHttpInfo(String productInstanceId, String section, String itemName) throws ApiException {
        com.squareup.okhttp.Call call = isDeviceInFeaturePercentageRangeValidateBeforeCall(productInstanceId, section, itemName, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns whether the device inside the feature percentage range or outside. The method is applicable for features, experiments,variant and streams (asynchronously)
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param section The section of the item updated: could be features/experiments/streams (required)
     * @param itemName The name of the item updated (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call isDeviceInFeaturePercentageRangeAsync(String productInstanceId, String section, String itemName, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = isDeviceInFeaturePercentageRangeValidateBeforeCall(productInstanceId, section, itemName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putProductBranch
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param branchName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putProductBranchCall(String productInstanceId, String branchName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/products/{productInstanceId}/branches/{branchName}"
            .replaceAll("\\{" + "productInstanceId" + "\\}", apiClient.escapeString(productInstanceId.toString()))
            .replaceAll("\\{" + "branchName" + "\\}", apiClient.escapeString(branchName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putProductBranchValidateBeforeCall(String productInstanceId, String branchName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productInstanceId' is set
        if (productInstanceId == null) {
            throw new ApiException("Missing the required parameter 'productInstanceId' when calling putProductBranch(Async)");
        }
        
        // verify the required parameter 'branchName' is set
        if (branchName == null) {
            throw new ApiException("Missing the required parameter 'branchName' when calling putProductBranch(Async)");
        }
        

        com.squareup.okhttp.Call call = putProductBranchCall(productInstanceId, branchName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Sets the current branch to be used on this product.
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param branchName  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String putProductBranch(String productInstanceId, String branchName) throws ApiException {
        ApiResponse<String> resp = putProductBranchWithHttpInfo(productInstanceId, branchName);
        return resp.getData();
    }

    /**
     * Sets the current branch to be used on this product.
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param branchName  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> putProductBranchWithHttpInfo(String productInstanceId, String branchName) throws ApiException {
        com.squareup.okhttp.Call call = putProductBranchValidateBeforeCall(productInstanceId, branchName, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sets the current branch to be used on this product. (asynchronously)
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param branchName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putProductBranchAsync(String productInstanceId, String branchName, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putProductBranchValidateBeforeCall(productInstanceId, branchName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runActionOnStream
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param streamId  (required)
     * @param actionId  (required)
     * @param doSuspend  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runActionOnStreamCall(String productInstanceId, String streamId, String actionId, Boolean doSuspend, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/products/{productInstanceId}/streams/{streamId}/actions/{actionId}"
            .replaceAll("\\{" + "productInstanceId" + "\\}", apiClient.escapeString(productInstanceId.toString()))
            .replaceAll("\\{" + "streamId" + "\\}", apiClient.escapeString(streamId.toString()))
            .replaceAll("\\{" + "actionId" + "\\}", apiClient.escapeString(actionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (doSuspend != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("doSuspend", doSuspend));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runActionOnStreamValidateBeforeCall(String productInstanceId, String streamId, String actionId, Boolean doSuspend, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productInstanceId' is set
        if (productInstanceId == null) {
            throw new ApiException("Missing the required parameter 'productInstanceId' when calling runActionOnStream(Async)");
        }
        
        // verify the required parameter 'streamId' is set
        if (streamId == null) {
            throw new ApiException("Missing the required parameter 'streamId' when calling runActionOnStream(Async)");
        }
        
        // verify the required parameter 'actionId' is set
        if (actionId == null) {
            throw new ApiException("Missing the required parameter 'actionId' when calling runActionOnStream(Async)");
        }
        

        com.squareup.okhttp.Call call = runActionOnStreamCall(productInstanceId, streamId, actionId, doSuspend, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Apply stream action on specific stream, the available actions are: [reset], [clearTrace], [suspend]
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param streamId  (required)
     * @param actionId  (required)
     * @param doSuspend  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String runActionOnStream(String productInstanceId, String streamId, String actionId, Boolean doSuspend) throws ApiException {
        ApiResponse<String> resp = runActionOnStreamWithHttpInfo(productInstanceId, streamId, actionId, doSuspend);
        return resp.getData();
    }

    /**
     * Apply stream action on specific stream, the available actions are: [reset], [clearTrace], [suspend]
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param streamId  (required)
     * @param actionId  (required)
     * @param doSuspend  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> runActionOnStreamWithHttpInfo(String productInstanceId, String streamId, String actionId, Boolean doSuspend) throws ApiException {
        com.squareup.okhttp.Call call = runActionOnStreamValidateBeforeCall(productInstanceId, streamId, actionId, doSuspend, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Apply stream action on specific stream, the available actions are: [reset], [clearTrace], [suspend] (asynchronously)
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param streamId  (required)
     * @param actionId  (required)
     * @param doSuspend  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runActionOnStreamAsync(String productInstanceId, String streamId, String actionId, Boolean doSuspend, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runActionOnStreamValidateBeforeCall(productInstanceId, streamId, actionId, doSuspend, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setDevicePercentageRange4Feature
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param section The section of the item updated: could be features/experiments/streams (required)
     * @param itemName The name of the item updated (required)
     * @param body Specifies whether the device in the feature percentage range or out. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setDevicePercentageRange4FeatureCall(String productInstanceId, String section, String itemName, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/products/{productInstanceId}/percentage"
            .replaceAll("\\{" + "productInstanceId" + "\\}", apiClient.escapeString(productInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (section != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("section", section));
        if (itemName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("itemName", itemName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setDevicePercentageRange4FeatureValidateBeforeCall(String productInstanceId, String section, String itemName, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productInstanceId' is set
        if (productInstanceId == null) {
            throw new ApiException("Missing the required parameter 'productInstanceId' when calling setDevicePercentageRange4Feature(Async)");
        }
        
        // verify the required parameter 'section' is set
        if (section == null) {
            throw new ApiException("Missing the required parameter 'section' when calling setDevicePercentageRange4Feature(Async)");
        }
        
        // verify the required parameter 'itemName' is set
        if (itemName == null) {
            throw new ApiException("Missing the required parameter 'itemName' when calling setDevicePercentageRange4Feature(Async)");
        }
        

        com.squareup.okhttp.Call call = setDevicePercentageRange4FeatureCall(productInstanceId, section, itemName, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Sets the device to be inside the feature percentage range or outside. The method is applicable for features, experiments,variant and streams
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param section The section of the item updated: could be features/experiments/streams (required)
     * @param itemName The name of the item updated (required)
     * @param body Specifies whether the device in the feature percentage range or out. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String setDevicePercentageRange4Feature(String productInstanceId, String section, String itemName, String body) throws ApiException {
        ApiResponse<String> resp = setDevicePercentageRange4FeatureWithHttpInfo(productInstanceId, section, itemName, body);
        return resp.getData();
    }

    /**
     * Sets the device to be inside the feature percentage range or outside. The method is applicable for features, experiments,variant and streams
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param section The section of the item updated: could be features/experiments/streams (required)
     * @param itemName The name of the item updated (required)
     * @param body Specifies whether the device in the feature percentage range or out. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> setDevicePercentageRange4FeatureWithHttpInfo(String productInstanceId, String section, String itemName, String body) throws ApiException {
        com.squareup.okhttp.Call call = setDevicePercentageRange4FeatureValidateBeforeCall(productInstanceId, section, itemName, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sets the device to be inside the feature percentage range or outside. The method is applicable for features, experiments,variant and streams (asynchronously)
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param section The section of the item updated: could be features/experiments/streams (required)
     * @param itemName The name of the item updated (required)
     * @param body Specifies whether the device in the feature percentage range or out. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setDevicePercentageRange4FeatureAsync(String productInstanceId, String section, String itemName, String body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setDevicePercentageRange4FeatureValidateBeforeCall(productInstanceId, section, itemName, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setResponsiveMode
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param body Specifies whether the device in the feature percentage range or out. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setResponsiveModeCall(String productInstanceId, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/products/{productInstanceId}/responsive-mode"
            .replaceAll("\\{" + "productInstanceId" + "\\}", apiClient.escapeString(productInstanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setResponsiveModeValidateBeforeCall(String productInstanceId, String body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'productInstanceId' is set
        if (productInstanceId == null) {
            throw new ApiException("Missing the required parameter 'productInstanceId' when calling setResponsiveMode(Async)");
        }
        

        com.squareup.okhttp.Call call = setResponsiveModeCall(productInstanceId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update product responsive mode streams for this product. DIRECT_MODE or CACHED_MODE
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param body Specifies whether the device in the feature percentage range or out. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String setResponsiveMode(String productInstanceId, String body) throws ApiException {
        ApiResponse<String> resp = setResponsiveModeWithHttpInfo(productInstanceId, body);
        return resp.getData();
    }

    /**
     * Update product responsive mode streams for this product. DIRECT_MODE or CACHED_MODE
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param body Specifies whether the device in the feature percentage range or out. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> setResponsiveModeWithHttpInfo(String productInstanceId, String body) throws ApiException {
        com.squareup.okhttp.Call call = setResponsiveModeValidateBeforeCall(productInstanceId, body, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update product responsive mode streams for this product. DIRECT_MODE or CACHED_MODE (asynchronously)
     * 
     * @param productInstanceId The product id as returned by the init function or taken directly from the defaults file. (required)
     * @param body Specifies whether the device in the feature percentage range or out. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setResponsiveModeAsync(String productInstanceId, String body, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setResponsiveModeValidateBeforeCall(productInstanceId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for statistic
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call statisticCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/products/statistic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call statisticValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = statisticCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves the server statistic data.
     * 
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String statistic() throws ApiException {
        ApiResponse<String> resp = statisticWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves the server statistic data.
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> statisticWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = statisticValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the server statistic data. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call statisticAsync(final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = statisticValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
